/***************************************************************************
 *  BenchmarkFeedback.proto - RoCKIn Protocol - Feedback message for benchmark
 *
 *  Copyright  2014  Sven Schneider
 ****************************************************************************/

/*  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the authors nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package rockin_msgs;

import "Pose3D.proto";
import "BenchmarkState.proto";

option java_package = "org.rockin.common_msgs";
option java_outer_classname = "BenchmarkFeedbackProtos";

message BenchmarkFeedback {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 110;
  }

  enum PlateState {
    UNUSABLE = 1;
    FAULTY   = 2;
    PERFECT  = 3;
  }

  // The benchmark phase to terminate
  // The specification of the benchmark phase is especially important in FBMs.
  // To finish the FBM, the robot should continuously send out the feedback
  // message until the phase in the benchmark state changes. To avoid
  // accidentally finishing the next phase via a burst of "old" feedback
  // messages, the desired phase that should be terminated is included in the
  // benchmark feedback.
  required BenchmarkState.Phase phase_to_terminate = 100;

  // FBM1
  optional string object_class_name = 1;
  optional Pose3D object_pose = 2;

  // FBM1+FMB2
  optional string object_instance_name = 3;

  // FBM2
  optional bool grasp_notification = 4;
  optional Pose3D end_effector_pose = 9;

  // TBM1
  optional string assembly_aid_tray_id = 5;
  optional string container_id = 6;

  // TBM2
  optional PlateState after_receiving = 7;
  optional PlateState after_drilling = 8;
}
